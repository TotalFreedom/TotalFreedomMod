package me.totalfreedom.totalfreedommod;

import com.comphenix.protocol.wrappers.nbt.NbtBase;
import com.comphenix.protocol.wrappers.nbt.NbtCompound;
import com.comphenix.protocol.wrappers.nbt.NbtFactory;
import com.comphenix.protocol.wrappers.nbt.NbtList;
import com.google.common.io.BaseEncoding;
import org.bukkit.Material;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerPickupItemEvent;
import org.bukkit.inventory.ItemStack;

public class AntiExploit extends FreedomService
{

    public AntiExploit(TotalFreedomMod plugin)
    {
        super(plugin);
    }

    @Override
    protected void onStart()
    {
    }

    @Override
    protected void onStop()
    {
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onInvClick(InventoryClickEvent event)
    {
        if (event.getWhoClicked().getType() != EntityType.PLAYER)
        {
            return;
        }
        final Player p = (Player) event.getWhoClicked();
        if (event.getCurrentItem() == null)
        {
            return;
        }
        if (isExploit(event.getCurrentItem(), p.getWorld().getName().toLowerCase()))
        {
            event.setCancelled(true);
            p.updateInventory();
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = false)
    public void onDrop(PlayerDropItemEvent event)
    {
        final Player p = event.getPlayer();
        if (event.getItemDrop() == null)
        {
            return;
        }
        if (isExploit(event.getItemDrop().getItemStack(), p.getWorld().getName().toLowerCase()))
        {
            event.setCancelled(true);
            p.updateInventory();
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = false)
    public void onPickup(PlayerPickupItemEvent event)
    {
        final Player p = event.getPlayer();
        if (event.getItem() == null)
        {
            return;
        }
        if (isExploit(event.getItem().getItemStack(), p.getWorld().getName().toLowerCase()))
        {
            event.getItem().remove();
            event.setCancelled(true);
        }
    }

    public boolean isExploit(ItemStack stack, String world)
    {
        if (stack == null || stack.getType() == Material.AIR)
        {
            return false;
        }
        boolean b = false;
        try
        {
            Material mat = stack.getType();
            NbtCompound tag = (NbtCompound) NbtFactory.fromItemTag(stack);
            if (stack.getAmount() < 1 || stack.getAmount() > 64 || tag.getKeys().size() > 15)
            {
                stack.setAmount(1);
                tag.getKeys().clear();
                return true;
            }

            if (mat == Material.CHEST || mat == Material.NAME_TAG || mat == Material.TRAPPED_CHEST || mat == Material.HOPPER || mat == Material.DROPPER)
            {
                String tags = tag.toString();
                if (tags.length() > 400)
                {
                    tag.getKeys().clear();
                    return true;
                }
            }
            else if ((mat == Material.SKULL || mat == Material.SKULL_ITEM) && stack.getDurability() == 3)
            {
                if (isExploitSkull(tag))
                {
                    b = true;
                }
            }
        }
        catch (Exception e)
        {

            return b;
        }
        return b;
    }

    /*
     Skull Exploit Fix Code https://github.com/MylesIsCool/SkullExploitPatch
     https://www.spigotmc.org/resources/skull-exploit-fix.26099/
     */
    @SuppressWarnings("rawtypes")
    public boolean isExploitSkull(NbtCompound root)
    {
        // Item
        if (root.containsKey("SkullOwner"))
        {
            NbtCompound skullOwner = root.getCompound("SkullOwner");
            if (skullOwner.containsKey("Id"))
            {
                String id = skullOwner.getString("Id");
                if (id.isEmpty() || id.length() != 36 || id.equals("00000000-0000-0000-0000-000000000000"))
                {
                    root.remove("SkullOwner");
                    return true;
                }
            }
            else
            {
                root.remove("SkullOwner");
                return true;
            }
            if (skullOwner.containsKey("Properties"))
            {
                NbtCompound properties = skullOwner.getCompound("Properties");
                if (properties.containsKey("textures"))
                {
                    NbtList<NbtBase> textures = properties.getList("textures");
                    for (NbtBase texture : textures.asCollection())
                    {
                        if (texture instanceof NbtCompound)
                        {
                            // Check for value
                            if (((NbtCompound) texture).containsKey("Value"))
                            {
                                if (((NbtCompound) texture).getString("Value").trim().length() > 0)
                                {
                                    String decoded = null;
                                    try
                                    {
                                        decoded = new String(BaseEncoding.base64().decode(((NbtCompound) texture).getString("Value")));
                                    }
                                    catch (Exception e)
                                    {
                                        root.remove("SkullOwner");
                                        return true;
                                    }
                                    if (decoded == null || decoded.isEmpty())
                                    {
                                        root.remove("SkullOwner");
                                        return true;
                                    }
                                    if (decoded.contains("textures") && decoded.contains("SKIN"))
                                    {
                                        if (decoded.contains("url"))
                                        {
                                            String Url = decoded.split("url\":")[1].replace("}", "").replace("\"", "");
                                            if (Url.isEmpty() || Url.trim().length() == 0)
                                            {
                                                root.remove("SkullOwner");
                                                return true;
                                            }
                                            if (!Url.startsWith("http://textures.minecraft.net/texture/"))
                                            {
                                                root.remove("SkullOwner");
                                                return true;
                                            }
                                        }
                                        else
                                        {
                                            root.remove("SkullOwner");
                                            return true;
                                        }
                                    }
                                    else
                                    {
                                        root.remove("SkullOwner");
                                        return true;
                                    }
                                }
                                else
                                {
                                    root.remove("SkullOwner");
                                    return true;
                                }
                            }
                            else
                            {
                                root.remove("SkullOwner");
                                return true;
                            }
                            if (((NbtCompound) texture).containsKey("Signature"))
                            {
                                if (((NbtCompound) texture).getString("Signature").trim().length() <= 0)
                                {
                                    root.remove("SkullOwner");
                                    return true;
                                }
                            }
                        }
                    }
                }
                else
                {
                    root.remove("SkullOwner");
                    return true;
                }
            }
            else
            {
                root.remove("SkullOwner");
                return true;
            }
        }
        return false;
    }
}
