package com.commodore.pixellibertymod.httpd.module;

import com.commodore.pixellibertymod.PixelLibertyMod;
import com.commodore.pixellibertymod.admin.Admin;
import com.commodore.pixellibertymod.banning.BanManager;
import com.commodore.pixellibertymod.httpd.HTTPDaemon;
import com.commodore.pixellibertymod.httpd.NanoHTTPD;
import com.commodore.pixellibertymod.util.FLog;
import java.io.File;

public class Module_bans extends HTTPDModule {

    public Module_bans(PixelLibertyMod plugin, NanoHTTPD.HTTPSession session) {
        super(plugin, session);
    }

    @Override
    public NanoHTTPD.Response getResponse() {
        File banFile = new File(plugin.getDataFolder(), BanManager.CONFIG_FILENAME);
        if (banFile.exists()) {
            final String remoteAddress = socket.getInetAddress().getHostAddress();
            if (!isAuthorized(remoteAddress)) {
                FLog.info("An unregistered IP (" + remoteAddress + ") has tried to access the ban list.");
                return new NanoHTTPD.Response(NanoHTTPD.Response.Status.NOT_FOUND, NanoHTTPD.MIME_PLAINTEXT,
                        "You may not view the banlist, Your IP, " + remoteAddress + ", is not registered to an admin on the server.");

            } else {
                return HTTPDaemon.serveFileBasic(new File(plugin.getDataFolder(), BanManager.CONFIG_FILENAME));
            }

        } else {
            return new NanoHTTPD.Response(NanoHTTPD.Response.Status.NOT_FOUND, NanoHTTPD.MIME_PLAINTEXT,
                    "Error 404: Not Found - The requested resource was not found on this server.");
        }
    }

    private boolean isAuthorized(String remoteAddress) {
        Admin entry = plugin.al.getEntryByIp(remoteAddress);
        return entry != null && entry.isActive();
    }
}
